
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */
behaviors {
  hm: homerow_mods {
    compatible = "zmk,behavior-hold-tap";
    label = "HOMEROW_MODS";
    #binding-cells = <2>;
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&kp>;
  };
  hl: home_layer_tap_hold {
    compatible = "zmk,behavior-hold-tap";
    label = "HOME_LAYER_TAP_HOLD";
    #binding-cells = <2>;
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    bindings = <&mo>, <&kp>;
  };
  bhm: balanced_homerow_mods {
    compatible = "zmk,behavior-hold-tap";
    label = "BALANCED_HOMEROW_MODS";
    #binding-cells = <2>;
    tapping-term-ms = <200>;    // <---[[moderate duration]]
    quick-tap-ms = <200>;
    flavor = "balanced";
    bindings = <&kp>, <&kp>;
  };
  bhl: balanced_home_layer_tap_hold {
    compatible = "zmk,behavior-hold-tap";
    label = "BALANCED_HOME_LAYER_TAP_HOLD";
    #binding-cells = <2>;
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    flavor = "balanced";
    bindings = <&mo>, <&kp>;
  };
  tm: thumb_mods {
    compatible = "zmk,behavior-hold-tap";
    label = "THUMB_MODS";
    #binding-cells = <2>;
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    flavor = "hold-preferred";
    bindings = <&kp>, <&kp>;
  };
  tl: thumb_layers {
    compatible = "zmk,behavior-hold-tap";
    label = "THUMB_LAYERS";
    #binding-cells = <2>;
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    flavor = "hold-preferred";
    bindings = <&mo>, <&kp>;
  };
  parsl: paren_shift_left {
    compatible = "zmk,behavior-mod-morph";
    label = "PAREN_SHIFT_LEFT";
    #binding-cells = <0>;
    bindings = <&parcl>, <&kp LPAR>;
    mods = <(MOD_RSFT)>;
  };
  parcl: paren_ctrl_left {
    compatible = "zmk,behavior-mod-morph";
    label = "PAREN_CTRL_LEFT";
    #binding-cells = <0>;
    bindings = <&pargl>, <&kp LBRC>;
    mods = <(MOD_RCTL)>;
  };
  pargl: paren_gui_left {
    compatible = "zmk,behavior-mod-morph";
    label = "PAREN_GUI_LEFT";
    #binding-cells = <0>;
    bindings = <&kp LCTRL>, <&kp LBKT>;
    mods = <(MOD_RGUI)>;
  };
  parsr: paren_shift_right {
    compatible = "zmk,behavior-mod-morph";
    label = "PAREN_SHIFT_RIGHT";
    #binding-cells = <0>;
    bindings = <&parcr>, <&kp RPAR>;
    mods = <(MOD_LSFT)>;
  };
  parcr: paren_ctrl_right {
    compatible = "zmk,behavior-mod-morph";
    label = "PAREN_CTRL_RIGHT";
    #binding-cells = <0>;
    bindings = <&parar>, <&kp RBRC>;
    mods = <(MOD_LCTL)>;
  };
  parar: paren_alt_right {
    compatible = "zmk,behavior-mod-morph";
    label = "PAREN_ALT_RIGHT";
    #binding-cells = <0>;
    bindings = <&kp RCTRL>, <&kp RBKT>;
    mods = <(MOD_LALT)>;
  };
  mega_shift: mega_shift {
    compatible = "zmk,behavior-tap-dance";
    label = "mega_shift";
    #binding-cells = <0>;
    tapping-term-ms = <500>;
    bindings = <&kp LSHIFT>, <&kp LC(LALT)>, <&kp LG(LC(LALT))>, <&kp LS(LG(LC(LALT)))>;
  };
};


    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
    &kp F1      &kp F2      &kp F3       &kp F4        &kp F5                                                                                                        &kp F6       &kp F7      &kp F8         &kp F9    &kp F10
 &kp EQUAL      &kp N1      &kp N2       &kp N3        &kp N4   &kp N5                                                                                 &kp N6        &kp N7       &kp N8      &kp N9         &kp N0  &kp MINUS
   &kp TAB       &kp Q       &kp W        &kp E       &hl 5 R    &kp T                                                                                  &kp Y       &hl 5 U        &kp I       &kp O          &kp P   &kp BSLH
   &kp ESC  &hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHIFT F  &hl 3 G                                                                                &hl 3 H  &hm RSHIFT J  &hm RCTRL K  &hm RGUI L  &hm RALT SEMI    &kp SQT
  &kp HOME       &kp Z       &kp X        &kp C       &hl 4 V    &kp B  &kp LCTRL  &tm LALT EQUAL   &kp LGUI   &kp RALT    &tm RGUI MINUS  &kp RCTRL    &kp N       &hl 4 M    &kp COMMA     &kp DOT       &kp FSLH  &kp PG_UP
   &kp END   &kp GRAVE  &magic 3 0     &kp LEFT     &kp RIGHT            &kp BSPC     &mega_shift  &tl 5 ESC  &tl 4 TAB  &tm RSHIFT ENTER  &kp SPACE               &kp DOWN       &kp UP    &kp LBKT       &kp RBKT  &kp PG_DN
            >;
        };

        layer_NoHMs {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans    &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans    &trans  &trans
 &trans  &trans  &trans  &trans   &kp R  &trans                                                  &trans   &kp U  &trans  &trans    &trans  &trans
 &trans   &kp A   &kp S   &kp D   &kp F   &kp G                                                   &kp H   &kp J   &kp K   &kp L  &kp SEMI  &trans
 &trans  &trans  &trans  &trans   &kp V  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &kp M  &trans  &trans    &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans
            >;
        };

        layer_Available01 {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Pwr {
            bindings = <
       &trans    &trans        &trans      &trans      &trans                                                                            &trans     &trans    &trans   &trans  &trans
       &trans    &trans        &trans      &trans      &trans      &trans                                                        &trans  &trans     &trans    &trans   &trans  &trans
       &trans   &kp INS        &kp UP     &kp DEL    &kp HOME   &kp PG_UP                                                  &kp C_BRI_UP  &kp F7     &kp F8    &kp F9  &kp F10  &trans
       &trans  &kp LEFT      &kp DOWN   &kp RIGHT     &kp END   &kp PG_DN                                                  &kp C_BRI_DN  &kp F4     &kp F5    &kp F6  &kp F11  &trans
 &kp C_VOL_DN  &kp C_PP  &kp C_VOL_UP  &kp C_MUTE  &kp C_PREV  &kp C_NEXT  &trans  &trans  &trans  &trans  &trans  &trans      &kp CAPS  &kp F1     &kp F2    &kp F3  &kp F12  &trans
   &magic 6 0    &trans        &tog 3      &trans      &trans              &trans  &trans  &tog 5  &tog 4  &trans  &trans                &trans  &kp PSCRN  &kp SLCK   &trans   &to 0
            >;
        };

        layer_Fun {
            bindings = <
 &trans        &trans        &trans      &trans         &trans                                                                           &trans    &trans     &trans     &trans  &trans
 &trans        &trans        &trans      &trans         &trans     &trans                                                      &trans    &trans    &trans     &trans     &trans  &trans
 &trans  &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &kp PG_DN                                                   &kp PG_UP  &kp LBRC  &kp RBRC   &kp LBKT   &kp RBKT  &trans
 &trans      &kp LPAR      &kp RPAR    &kp HASH       &kp DLLR     &kp AT                                                    &kp LEFT  &kp DOWN    &kp UP  &kp RIGHT  &kp EQUAL  &trans
 &trans     &kp MINUS      &kp STAR    &kp PLUS      &kp CARET  &kp PRCNT   &trans  &trans  &trans  &trans  &trans  &trans   &kp EXCL  &kp AMPS  &kp PIPE  &kp UNDER     &trans  &trans
 &trans        &trans        &tog 3      &trans         &trans             &kp DEL  &trans  &tog 5  &tog 4  &trans  &trans               &trans    &trans     &trans     &trans  &trans
            >;
        };

        layer_Num {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT   &kp C_PP                                                                           &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans      &kp CAPS     &kp INS   &kp K_APP  &kp PSCRN   &kp SLCK                                                      &kp LPAR  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY          &kp F11
       &trans      &kp LBKT    &kp RBKT      &kp UP   &kp LBRC   &kp RBRC                                                      &kp RPAR   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS          &kp F12
       &trans     &kp SPACE    &kp LEFT    &kp DOWN  &kp RIGHT      &none                                                      &kp DLLR   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
       &trans      &kp LPAR    &kp RPAR   &kp EQUAL  &kp CARET  &kp PRCNT  &trans  &trans  &trans  &trans  &trans     &trans  &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
       &trans        &trans      &tog 3      &trans     &trans             &trans  &trans  &tog 5  &tog 4  &trans  &kp KP_N0                 &trans        &trans    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none  &tog 1   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &to 0
            >;
        };

    };
};
